name: Create Draft Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on tags like v1.2.3

permissions:
  contents: write  # Needed to create release

jobs:
  create-draft-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Extract and Validate Latest Changelog
        id: extract_changelog
        run: |
          TAG_VERSION=${GITHUB_REF##*/}     # v1.2.3
          VERSION=${TAG_VERSION#v}          # 1.2.3

          echo "Tag version: $VERSION"
          echo "Reading first version in CHANGELOG.md..."

          FIRST_VERSION=$(grep -E '^[0-9]+\.[0-9]+\.[0-9]+ - [0-9]{4}-[0-9]{2}-[0-9]{2}' CHANGELOG.md | head -1 | awk '{print $1}')

          if [ "$FIRST_VERSION" != "$VERSION" ]; then
            echo "::error ::CHANGELOG.md's latest version $FIRST_VERSION does not match tag version $VERSION"
            exit 1
          fi

          echo "Versions match. Extracting changelog section..."

          awk -v ver="$VERSION" '
            $0 ~ "^" ver " - " {
              in_section=1
              next
            }
            in_section {
              if ($0 ~ /^[0-9]+\.[0-9]+\.[0-9]+ - [0-9]{4}-[0-9]{2}-[0-9]{2}$/) exit
              print
            }
          ' CHANGELOG.md > latest_changelog.txt

          echo "changelog_section<<EOF" >> $GITHUB_OUTPUT
          cat latest_changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            **Release Notes:**
            ${{ steps.extract_changelog.outputs.changelog_section }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Download Artifacts from JFrog
      #   id: download_artifacts
      #   run: |
      #     set -e
      #     VERSION=${GITHUB_REF##*/}  # v1.2.3
      #     VERSION=${VERSION#v}       # 1.2.3
      #     BASE_URL="https://<our-jfrog-domain>.jfrog.io/artifactory/<our-repo>/releases"
      #     
      #     curl_retry() {
      #       local url=$1
      #       local output=$2
      #       for i in {1..3}; do
      #         echo "Attempt $i to download $url"
      #         if curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" -fL "$url" -o "$output"; then
      #           echo "Downloaded $output"
      #           return 0
      #         fi
      #         echo "Retrying in 5s..."
      #         sleep 5
      #       done
      #       echo "::error ::Failed to download $url after 3 attempts"
      #       return 1
      #     }
      #     
      #     echo "Downloading .nupkg..."
      #     curl_retry "$BASE_URL/${VERSION}.nupkg" "${VERSION}.nupkg"
      #     
      #     mkdir -p assemblies
      #     declare -a components=("NationalInstruments.SemiconductorTestLibrary.Abstractions" "NationalInstruments.SemiconductorTestLibrary.Extensions" "NationalInstruments.SemiconductorTestLibrary.TestStandSteps")
      #     declare -a extensions=("dll" "pdb" "xml")
      #     
      #     for component in "${components[@]}"; do
      #       for ext in "${extensions[@]}"; do
      #         FILENAME="${component}.${ext}"
      #         URL="$BASE_URL/$FILENAME"
      #         OUTFILE="assemblies/$FILENAME"
      #         if ! curl_retry "$URL" "$OUTFILE"; then
      #           echo "::warning ::$FILENAME not found or failed to download."
      #         fi
      #       done
      #     done
      #     
      #     echo "Creating assemblies.zip..."
      #     cd assemblies
      #     if [ "$(ls -1 | wc -l)" -eq 0 ]; then
      #       echo "::error ::No files in assemblies/. Aborting zip creation."
      #       exit 1
      #     fi
      #     zip ../assemblies.zip *
      #     cd ..

      # - name: Upload Release Assets
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ github.ref }}
      #     files: |
      #       *.nupkg
      #       assemblies.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
