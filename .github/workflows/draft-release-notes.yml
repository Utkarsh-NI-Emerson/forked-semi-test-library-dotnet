name: Create Draft Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 25.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-draft-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Validate and Extract Changelog
        id: extract_changelog
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"

          FIRST_VERSION=$(grep -Po '^\s*-\s*\[\s*\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -1)

          if [ "$FIRST_VERSION" != "$VERSION" ]; then
            echo "::error ::CHANGELOG.md's latest version '$FIRST_VERSION' does not match input version '$VERSION'"
            exit 1
          fi

          awk -v ver="$VERSION" '
            $0 ~ "^[[:space:]]*##[[:space:]]+" ver " -" { in_section=1; next }
            in_section {
              if ($0 ~ "^[[:space:]]*##[[:space:]]+") exit
              print
            }
          ' CHANGELOG.md > latest_changelog.txt

          echo "changelog_section<<EOF" >> $GITHUB_OUTPUT
          cat latest_changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git Tag if not exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"
          echo "TAG=$TAG" >> $GITHUB_ENV

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Axios
        run: npm install axios

      - name: Download .nupkg using Node.js + Axios
        run: |
          VERSION="${{ github.event.inputs.version }}"
          FILENAME="NationalInstruments.SemiconductorTestLibrary.$VERSION.nupkg"
          URL="https://pull.artifacts.ni.com/artifactory/rnd-nuget-ci/NationalInstruments.SemiconductorTestLibrary/$FILENAME"

          echo "Downloading from $URL"

          cat <<EOF > download.js
          const fs = require('fs');
          const axios = require('axios');

          const version = process.env.VERSION;
          const fileName = \`NationalInstruments.SemiconductorTestLibrary.\${version}.nupkg\`;
          const url = \`https://pull.artifacts.ni.com/artifactory/rnd-nuget-ci/NationalInstruments.SemiconductorTestLibrary/\${fileName}\`;
          const auth = process.env.JFROG_AUTH_BASIC.trim();

          let config = {
            method: 'get',
            maxBodyLength: Infinity,
            url: url,
            responseType: 'stream',
            headers: { 
              'Authorization': \`Basic \${auth}\`
            }
          };

          axios.request(config)
          .then((response) => {
            const writer = fs.createWriteStream(fileName);
            response.data.pipe(writer);
            writer.on('finish', () => {
              console.log('Download completed:', fileName);
            });
          })
          .catch((error) => {
            console.error('Download failed:', error.response?.status || error.message);
            process.exit(1);
          });
          EOF

          node download.js
        env:
          VERSION: ${{ github.event.inputs.version }}
          JFROG_AUTH_BASIC: ${{ secrets.JFROG_AUTH_BASIC }}

      - name: Create Draft Release and Attach Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          body: |
            **Release Notes:**
            ${{ steps.extract_changelog.outputs.changelog_section }}
          draft: true
          files: |
            NationalInstruments.SemiconductorTestLibrary.${{ github.event.inputs.version }}.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
