name: Trigger DocFX Release Flow

# Do we want to check which branch we run this workflow on ??
on:
  workflow_dispatch:
    inputs:
      dryRun:
        type: choice
        description: "Run in dry run mode?"
        options:
          - 'true'
          - 'false'
        default: 'true'

permissions:
  contents: read       # Required to check out the code and access repo files
  pages: write         # Required to deploy to GitHub Pages (grants access to Pages API)
  id-token: write      # Required for OIDC authentication with GitHub Pages (used internally by deploy-pages action)

jobs:
  trigger-docfx:
    runs-on: ubuntu-latest
    # environment: gh-action-testing (Un-comment when raising PR)

    ###### Should we use this environment or not?? #####
    # environment:
    #   name: github-pages
    #   url: ${{ steps.deployment.outputs.page_url }}
    env:
      AZDO_ORG: ni
      AZDO_PROJECT: DevCentral
      AZDO_PIPELINE_ID: 27856 # (inserted manually)
      GITHUB_BRANCH: "${{ github.ref_name }}"

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Asked input for GitHub Branch, but not used it yet have to provide input to Azure Pipeline somehow
      # Step 2: Trigger the Azure DevOps pipeline
      - name: Trigger Azure DevOps pipeline
        id: trigger
        run: |
          AZDO_BRANCH="users/usaxena/test-docfx-build" # Change when raising PR
          echo "Triggering Azure DevOps pipeline..."
      
          # NOTE: GitHub input 'branch' is collected but not used yet
          echo "GitHub branch input (unused for now): $GITHUB_BRANCH"
      
          BODY=$(jq -n \
            --arg ref "refs/heads/$AZDO_BRANCH" \
            '{
              resources: {
                repositories: {
                  self: {
                    refName: $ref
                  }
                }
              }
            }')
      
          RESPONSE=$(curl -sS -X POST \
            -u ":${{ secrets.AZURE_DEVOPS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/pipelines/$AZDO_PIPELINE_ID/runs?api-version=7.0")
      
          echo "Azure DevOps Response:"
          echo "$RESPONSE" | jq
      
          RUN_ID=$(echo "$RESPONSE" | jq -r '.id')
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "Failed to trigger Azure DevOps pipeline"
            exit 1
          fi
      
          PIPELINE_URL="https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_build/results?buildId=$RUN_ID"
          echo "Azure DevOps pipeline triggered: $PIPELINE_URL"
      
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
    
      # Added time-out for 20 minutes for now, can change after checking pipeline runs
      # Step 3: Wait until the pipeline run completes
      - name: Wait for Pipeline Completion
        id: wait
        run: |
          RUN_ID="${{ steps.trigger.outputs.run_id }}"
          TIMEOUT=3600   # fail after 1 hour
          INTERVAL=60    # checking status every 1 minute
          ELAPSED=0
          STATUS="inProgress"
      
          echo "Waiting for Azure DevOps pipeline run ID: $RUN_ID"
      
          while [[ "$STATUS" == "inProgress" || "$STATUS" == "notStarted" ]]; do
            if [[ "$ELAPSED" -ge "$TIMEOUT" ]]; then
              echo "::error ::Timeout reached after 20 minutes while waiting for Azure DevOps pipeline to complete."
              exit 1
            fi
      
            RESPONSE=$(curl -s -u ":${{ secrets.AZURE_DEVOPS_TOKEN }}" \
              "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/pipelines/$AZDO_PIPELINE_ID/runs/$RUN_ID?api-version=7.0")
      
            STATUS=$(echo "$RESPONSE" | jq -r '.state')
            RESULT=$(echo "$RESPONSE" | jq -r '.result')
      
            echo "Current state: $STATUS"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
      
          echo "Pipeline completed with result: $RESULT"
          if [[ "$RESULT" != "succeeded" ]]; then
            echo "::error ::Azure DevOps pipeline failed with result: $RESULT"
            exit 1
          fi

      # Step 4: In dry run mode, list artifact names and download URLs
      - name: Output Azure DevOps Artifact Links (Dry Run)
        if: ${{ inputs.dryRun == 'true' }}
        run: |
          echo "## Azure DevOps Artifact Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
          RUN_ID=${{ steps.trigger.outputs.run_id }}
          BASE_URL="https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/pipelines/$AZDO_PIPELINE_ID/runs/$RUN_ID/artifacts?artifactName"
      
          echo "- [docfx-site]($BASE_URL=docfx-site)" >> $GITHUB_STEP_SUMMARY
          echo "- [docfx-metadata]($BASE_URL=docfx-metadata)" >> $GITHUB_STEP_SUMMARY
      
          echo "Direct links to artifacts:"
          echo "$BASE_URL=docfx-site"
          echo "$BASE_URL=docfx-metadata"
    
      # Step 5: Download docfx-site artifact if not in dry run
      - name: Download docfx-site artifact
        if: ${{ inputs.dryRun == 'false' }}
        run: |
          mkdir site
          echo "Fetching docfx-site artifact..."
          ARTIFACTS_URL="https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/pipelines/$AZDO_PIPELINE_ID/runs/${{ steps.trigger.outputs.run_id }}/artifacts?api-version=7.0"
          URL=$(curl -s -u ":${{ secrets.AZURE_DEVOPS_TOKEN }}" "$ARTIFACTS_URL" | jq -r '.value[] | select(.name == "docfx-site") | .resource.downloadUrl')

          echo "Downloading from $URL"
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "Failed to get docfx-site artifact URL"
            exit 1
          fi
          curl -L -u ":${{ secrets.AZURE_DEVOPS_TOKEN }}" "$URL" --output site.zip
          unzip site.zip -d site

      # Step 6: Upload docfx-site artifact for GitHub Pages deployment
      - name: Upload Pages Artifact
        if: ${{ inputs.dryRun == 'false' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'  # This is where we unzipped docfx-site

      # Step 7: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: ${{ inputs.dryRun == 'false' }}
        id: deployment
        uses: actions/deploy-pages@v4