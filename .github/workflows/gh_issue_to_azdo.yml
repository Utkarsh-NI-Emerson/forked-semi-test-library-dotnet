name: Create AzDo Work Item on New GitHub Issue

on:
  issues:
    types: [opened]

jobs:
  create_azdo_work_item:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Extract issue details safely and store them in environment variables.
      - name: Extract Issue Details
        id: issue
        run: |
          echo "title=$(echo '${{ github.event.issue.title }}' | jq -Rr @json)" >> $GITHUB_ENV
          echo "body=$(echo '${{ github.event.issue.body }}' | jq -Rr @json)" >> $GITHUB_ENV
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "issue_url=${{ github.event.issue.html_url }}" >> $GITHUB_ENV

      # Step 2: Extract Labels from the Issue.
      - name: Extract Labels
        id: labels
        run: |
          LABELS_JSON='${{ toJson(github.event.issue.labels) }}'
          LABELS=$(echo "$LABELS_JSON" | jq -r 'map(.name) | join(", ")')
          echo "labels=\"$LABELS\"" >> $GITHUB_ENV
      
      # Debug label extaction 
      - name: Debug Labels Extraction
        run: |
          echo '${{ toJson(github.event.issue.labels) }}' | jq .
            
      # Step 3: Determine Work Item Type Based on Labels.
      - name: Determine Work Item Type
        id: work_item_type
        run: |
          # Load labels from environment (now stored as LABELS)
          LABELS_VALUE="${{ env.labels }}"
          TYPE="Customer Escalation"
          if echo "$LABELS_VALUE" | grep -qi 'enhancement'; then 
            TYPE="User Story"
          elif echo "$LABELS_VALUE" | grep -qi 'bug'; then
            TYPE="Bug"
          fi
          echo "work_item_type=$TYPE" >> $GITHUB_ENV

      # Step 4: Ensure jq is installed (if missing).
      - name: Install jq
        run: sudo apt-get install jq -y

      # Step 5: Notify Developers via Microsoft Teams.
      - name: Notify Developers via Microsoft Teams
        run: |
          MESSAGE=$(jq -n \
            --arg title "${{ env.title }}" \
            --arg body "${{ env.body }}" \
            --arg issue_url "${{ env.issue_url }}" \
            --arg issue_number "#${{ env.issue_number }}" \
            --arg labels "${{ env.labels }}" \
            --arg type "${{ env.work_item_type }}" \
            '{
              "@type": "MessageCard",
              "@context": "https://schema.org/extensions",
              "themeColor": "0076D7",
              "summary": "New GitHub Issue Assigned",
              "sections": [{
                "activityTitle": "**New GitHub Issue Created**",
                "facts": [
                  { "name": "Title", "value": $title },
                  { "name": "Issue Number", "value": $issue_number },
                  { "name": "Labels", "value": $labels },
                  { "name": "GitHub Issue", "value": $issue_url },
                  { "name": "Description", "value": $body }
                ],
                "markdown": true
              }]
            }')
          
          curl -H "Content-Type: application/json" -d "$MESSAGE" ${{ secrets.TEAMS_WEBHOOK_URL }}