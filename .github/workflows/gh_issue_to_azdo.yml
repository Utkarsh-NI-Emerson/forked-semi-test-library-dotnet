name: Create AzDO Work Item on New Issue

on:
  issues:
    types: [opened]

jobs:
  create_work_item:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Determine the work item type based on the issue labels.
      - name: Determine Work Item Type
        id: determine_type
        uses: actions/github-script@v6
        with:
          script: |
            // Convert all labels to lowercase for case-insensitive comparison.
            const labels = context.payload.issue.labels.map(label => label.name.toLowerCase());
            let workItemType = "Customer Escalation";
            if (labels.includes("enhancement")) {
              workItemType = "User Story";
            } else if (labels.includes("bug")) {
              workItemType = "Bug";
            }
            console.log(`Work item type determined: ${workItemType}`);
            return { workItemType };

      # Step 2: Create the Azure DevOps work item using the AzDo REST API.
      - name: Create Azure DevOps Work Item
        id: create_azdo
        env:
          AZDO_ORG: ${{ secrets.AZDO_ORGANIZATION }}
          AZDO_PROJECT: ${{ secrets.AZDO_PROJECT }}
          AZDO_PAT: ${{ secrets.AZDO_PAT }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          WORK_ITEM_TYPE: ${{ steps.determine_type.outputs.workItemType }}
        run: |
          echo "Creating work item of type: ${WORK_ITEM_TYPE}"
          # URL-encode work item type (replace spaces with %20)
          workItemTypeEncoded=$(echo "$WORK_ITEM_TYPE" | sed 's/ /%20/g')
          # NOTE: The AzDo API expects a '$' before the work item type.
          URL="https://dev.azure.com/${AZDO_ORG}/${AZDO_PROJECT}/_apis/wit/workitems/\$$workItemTypeEncoded?api-version=6.0"
          echo "AzDo URL: $URL"
          
          # Build the JSON Patch payload using jq (avoiding heredoc)
          PAYLOAD=$(jq -n \
            --arg title "$ISSUE_TITLE" \
            --arg body "$ISSUE_BODY" \
            '[{"op": "add", "path": "/fields/System.Title", "value": $title}, {"op": "add", "path": "/fields/System.Description", "value": $body}]')
          echo "Payload: $PAYLOAD"
          
          # Call the AzDo API using curl with the PATCH method.
          RESPONSE=$(curl -sS -u ":$AZDO_PAT" \
            -X PATCH \
            -H "Content-Type: application/json-patch+json" \
            -d "$PAYLOAD" \
            "$URL")
          
          echo "AzDo Response: $RESPONSE"
          # Instead of using set-output, append the output to the GITHUB_OUTPUT file.
          echo "azdo_response=$RESPONSE" >> "$GITHUB_OUTPUT"

      # Step 3: Notify NI Developers on Teams about the new GitHub issue.
      - name: Notify NI Developers on Teams
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          echo "Notifying NI developers on Teams about the new issue..."
          # Build the JSON payload for Teams with the issue details.
          teams_payload='{
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": "New GitHub Issue Created",
            "sections": [
              {
                "activityTitle": "New GitHub Issue: **'"$ISSUE_TITLE"'**",
                "facts": [
                  { "name": "Title", "value": "'"$ISSUE_TITLE"'" },
                  { "name": "Description", "value": "'"$ISSUE_BODY"'" },
                  { "name": "URL", "value": "[View Issue]('"$ISSUE_URL"')" }
                ],
                "markdown": true
              }
            ]
          }'
          echo "$teams_payload" > teams_payload.json
          cat teams_payload.json
          curl -H "Content-Type: application/json" -d @teams_payload.json "$TEAMS_WEBHOOK_URL"

      # Step 4: Comment on the GitHub issue indicating that the development team has been notified.
      - name: Comment on GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issueNumber,
              body: "The development team has been notified."
            });
