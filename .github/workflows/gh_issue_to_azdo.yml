name: Issue Created Handler

on:
  issues:
    types: [opened]

jobs:
  handle-new-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Notify NI Developers on Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Notifying NI developers on Teams about the new issue..."
          teams_payload='{
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": "New GitHub Issue Created",
            "sections": [
              {
                "activityTitle": "New GitHub Issue: **'"$ISSUE_TITLE"'** (#'"$ISSUE_NUMBER"')",
                "facts": [
                  { "name": "Title", "value": "'"$ISSUE_TITLE"'" },
                  { "name": "Issue Number", "value": "'"$ISSUE_NUMBER"'" },
                  { "name": "Description", "value": "'"$ISSUE_BODY"'" },
                  { "name": "URL", "value": "[View Issue]('"$ISSUE_URL"')" }
                ],
                "markdown": true
              }
            ]
          }'
          echo "$teams_payload" > teams_payload.json
          cat teams_payload.json
          curl -H "Content-Type: application/json" -d @teams_payload.json "$TEAMS_WEBHOOK_URL"

      - name: Determine Work Item Type
        id: determine-work-item-type
        uses: actions/github-script@v6
        with:
          script: |
            const labels = context.payload.issue.labels.map(label => label.name.toLowerCase());
            let workItemType = "";
            if (labels.includes("bug")) {
              workItemType = "Bug";
            } else if (labels.includes("enhancement")) {
              workItemType = "User Story";
            } else {
              workItemType = "Customer Escalation";
            }
            // URL-encode the work item type (e.g., "User Story" becomes "User%20Story")
            const encodedType = encodeURIComponent(workItemType);
            return encodedType;
          result-encoding: string

      - name: Get Azure DevOps User Descriptor
        id: get-user-descriptor
        env:
          AZDO_ORG: ${{ secrets.AZDO_ORG }}
          AZDO_PAT: ${{ secrets.AZDO_PAT }}
          # Utkarsh Saxena's email address
          AZDO_USER_EMAIL: utkarsh.saxena@emerson.com
        run: |
          echo "Fetching Azure DevOps user descriptor for ${AZDO_USER_EMAIL}"
          ENCODED_EMAIL=$(python -c "import urllib.parse; print(urllib.parse.quote('''${AZDO_USER_EMAIL}'''))")
          echo "Encoded email: $ENCODED_EMAIL"
          RESPONSE=$(curl -s -u :$AZDO_PAT "https://vssps.dev.azure.com/${AZDO_ORG}/_apis/graph/users?api-version=7.1-preview.1&filterValue=${ENCODED_EMAIL}")
          echo "Graph API Response:"
          echo "$RESPONSE" | jq .
          DESCRIPTOR=$(echo "$RESPONSE" | jq -r '.value[0].descriptor')
          if [ -z "$DESCRIPTOR" ]; then
            echo "Error: Could not retrieve user descriptor for ${AZDO_USER_EMAIL}"
            exit 1
          fi
          echo "User descriptor: $DESCRIPTOR"
          echo "::set-output name=descriptor::$DESCRIPTOR"

      - name: Get Azure DevOps User ID
        id: get-user-id
        env:
          AZDO_ORG: ${{ secrets.AZDO_ORG }}
          AZDO_PAT: ${{ secrets.AZDO_PAT }}
        run: |
          # Use the descriptor obtained in the previous step
          USER_DESCRIPTOR=${{ steps.get-user-descriptor.outputs.descriptor }}
          echo "Using User Descriptor: $USER_DESCRIPTOR"
          # Call the GET API to fetch user details (returns the same descriptor for our purposes)
          RESPONSE=$(curl -s -u :$AZDO_PAT "https://vssps.dev.azure.com/${AZDO_ORG}/_apis/graph/users/${USER_DESCRIPTOR}?api-version=7.1-preview.1")
          echo "User details:"
          echo "$RESPONSE" | jq .
          # We'll assume that the user ID to be used for the Markdown mention is the descriptor.
          echo "::set-output name=userID::$USER_DESCRIPTOR"

      - name: Create work item in Azure DevOps (Markdown)
        env:
          AZDO_ORG: ${{ secrets.AZDO_ORG }}
          AZDO_PROJECT: ${{ secrets.AZDO_PROJECT }}
          AZDO_PAT: ${{ secrets.AZDO_PAT }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          # Use the user ID (which in this case is the descriptor) for the Markdown mention
          AZDO_USER_ID: ${{ steps.get-user-id.outputs.userID }}
        run: |
          echo "Creating Azure DevOps work item for GitHub Issue: $ISSUE_TITLE"
          # This is the exact line where the mention is inserted using Markdown:
          # It uses the syntax @<UserID> to mention the user.
          PATCH_DOC=$(jq -n \
            --arg title "GitHub Issue: $ISSUE_TITLE" \
            --arg description "@<${AZDO_USER_ID}> has been assigned.\n\n**Issue Details:**\n\n$ISSUE_BODY\n\n[View Issue on GitHub]($ISSUE_URL)" \
            '[{"op": "add", "path": "/fields/System.Title", "value": $title},
              {"op": "add", "path": "/fields/System.Description", "value": $description}]')
          echo "$PATCH_DOC" > patch.json
          WORK_ITEM_URL="https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workitems/\$${{ steps.determine-work-item-type.outputs.result }}?api-version=6.0"
          echo "Work Item URL: $WORK_ITEM_URL"
          RESPONSE=$(curl -s -u :$AZDO_PAT \
            -X POST \
            -H "Content-Type: application/json-patch+json" \
            --data @patch.json \
            "$WORK_ITEM_URL")
          echo "Azure DevOps response: $RESPONSE"

      - name: Add comment on GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const commentBody = "The NI development team has been notified via Teams and a corresponding work item has been created.";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody,
            });
