name: Issue Created Handler

on:
  issues:
    types: [opened]

jobs:
  handle-new-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Notify NI Developers on Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Notifying NI developers on Teams about the new issue..."
          # Build the JSON payload for Teams with the issue details in a shell variable.
          teams_payload='{
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "themeColor": "0076D7",
            "summary": "New GitHub Issue Created",
            "sections": [
              {
                "activityTitle": "New GitHub Issue: **'"$ISSUE_TITLE"'** (#'"$ISSUE_NUMBER"')",
                "facts": [
                  { "name": "Title", "value": "'"$ISSUE_TITLE"'" },
                  { "name": "Issue Number", "value": "'"$ISSUE_NUMBER"'" },
                  { "name": "Description", "value": "'"$ISSUE_BODY"'" },
                  { "name": "URL", "value": "[View Issue]('"$ISSUE_URL"')" }
                ],
                "markdown": true
              }
            ]
          }'
          echo "$teams_payload" > teams_payload.json
          cat teams_payload.json
          curl -H "Content-Type: application/json" -d @teams_payload.json "$TEAMS_WEBHOOK_URL"

      - name: Determine Work Item Type
        id: determine-work-item-type
        uses: actions/github-script@v6
        with:
          script: |
            // Retrieve all label names and normalize them to lower case for case-insensitive matching.
            const labels = context.payload.issue.labels.map(label => label.name.toLowerCase());
            console.log("Normalized issue labels: " + labels);
            let workItemType = "";
            // Use precedence: if "bug" exists, choose Bug; else if "enhancement" exists, choose User Story; otherwise, default to Customer Escalation.
            if (labels.includes("bug")) {
              workItemType = "Bug";
            } else if (labels.includes("enhancement")) {
              workItemType = "User Story";
            } else {
              workItemType = "Customer Escalation";
            }
            // URL-encode the work item type (e.g., "User Story" becomes "User%20Story")
            const encodedType = encodeURIComponent(workItemType);
            console.log("Work item type (encoded): " + encodedType);
            return encodedType;
          result-encoding: string

      - name: Create work item in Azure DevOps
        env:
          AZDO_ORG: ${{ secrets.AZDO_ORG }}
          AZDO_PROJECT: ${{ secrets.AZDO_PROJECT }}
          AZDO_PAT: ${{ secrets.AZDO_PAT }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "Creating Azure DevOps work item for GitHub Issue: $ISSUE_TITLE"
          # Build a JSON patch document that includes the issue title and a description with a clickable link.
          PATCH_DOC=$(jq -n \
            --arg title "GitHub Issue: $ISSUE_TITLE" \
            --arg description "<p><strong>Issue Details:</strong></p>
                              <p>$ISSUE_BODY</p>
                              <p><a href=\"$ISSUE_URL\">View Issue on GitHub</a></p>" \
            '[{"op": "add", "path": "/fields/System.Title", "value": $title},
              {"op": "add", "path": "/fields/System.Description", "value": $description}]')
          echo "$PATCH_DOC" > patch.json
          # Construct the Azure DevOps API URL using the determined work item type.
          WORK_ITEM_URL="https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workitems/\$${{ steps.determine-work-item-type.outputs.result }}?api-version=6.0"
          echo "Work Item URL: $WORK_ITEM_URL"
          # Call the Azure DevOps API to create the work item.
          RESPONSE=$(curl -s -u :$AZDO_PAT \
            -X POST \
            -H "Content-Type: application/json-patch+json" \
            --data @patch.json \
            "$WORK_ITEM_URL")
          echo "Azure DevOps response: $RESPONSE"
          
          # Extract the created work item ID from the response.
          WORK_ITEM_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "Created Work Item ID: $WORK_ITEM_ID"
          
          # Add a comment with a tag to the created work item.
          COMMENT_TEXT="Hey [~Utkarsh Saxena], please review the work item details."
          COMMENT_PAYLOAD=$(jq -n --arg text "$COMMENT_TEXT" '{ "text": $text }')
          echo "$COMMENT_PAYLOAD" > comment.json
          COMMENT_URL="https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workItems/$WORK_ITEM_ID/comments?api-version=6.0-preview.3"
          RESPONSE_COMMENT=$(curl -s -u :$AZDO_PAT \
            -X POST \
            -H "Content-Type: application/json" \
            --data @comment.json \
            "$COMMENT_URL")
          echo "Azure DevOps comment response: $RESPONSE_COMMENT"

      - name: Add comment on GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const commentBody = "The NI development team has been notified via Teams and a corresponding work item has been created in Azure DevOps.";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody,
            });
