name: Comment on GitHub Issue for Closed Work Items

on:
  workflow_dispatch: # This allows manual triggering

env:
  AZDO_ORG: ni
  AZDO_PROJECT: DevCentral
  AREA_PATH: DevCentral\Business Units\Semiconductor\STS APT App SW\Mixed Signal Libs and Tools
  GITHUB_ORG: Utkarsh-NI-Emerson
  GITHUB_REPO: forked-semi-test-library-dotnet

jobs:
  CommentOnGitHubIssue:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Closed Work Items from Azure DevOps
        run: |
          echo "Fetching closed work items updated in the last day..."
          
          TOKEN="${{ secrets.AZURE_DEVOPS_TOKEN }}" # Use correct secret name
          AREA_PATH_ESCAPED="${AREA_PATH//\\/\\\\}" # Ensure proper escaping
          
          echo "Escaped AREA_PATH: $AREA_PATH_ESCAPED"

          PAYLOAD=$(jq -n \
            --arg area "$AREA_PATH_ESCAPED" \
            '{"query": "SELECT [System.Id] FROM WorkItems WHERE [System.State] = '\''Closed'\'' AND [System.ChangedDate] >= @Today - 2 AND [System.WorkItemType] IN ('\''User Story'\'', '\''Bug'\'', '\''Customer Escalation'\'') AND [System.AreaPath] = $area"}')

          echo "Payload: $PAYLOAD"

          RESPONSE=$(curl -s -u ":$TOKEN" \
            -X POST "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/wiql?api-version=7.1-preview.2" \
            -H "Content-Type: application/json" \
            --data-binary "$PAYLOAD")

          echo "Raw response from Azure DevOps:"
          echo "$RESPONSE"

          if echo "$RESPONSE" | jq -e '.workItems' >/dev/null 2>&1; then
            ITEM_COUNT=$(echo "$RESPONSE" | jq '.workItems | length')
            if [ "$ITEM_COUNT" -eq 0 ]; then
              echo "No closed work items found. Exiting."
              exit 0
            fi
            echo "$RESPONSE" | jq -r '.workItems[].id' > closed_items.txt
          else
            echo "Error: Response does not contain 'workItems'. Verify WIQL query."
            exit 1
          fi
        shell: bash

      - name: Process Work Items and Identify GitHub Issues
        run: |
          echo "Processing each work item..."
          if [ ! -s closed_items.txt ]; then
            echo "No closed work items found. Exiting."
            exit 0
          fi

          TOKEN="${{ secrets.AZURE_DEVOPS_TOKEN }}"

          while read id; do
            echo "Processing Work Item ID: $id"
            WI_DETAILS=$(curl -s -u ":$TOKEN" \
              -X GET "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workitems/$id?\$expand=relations&api-version=7.1-preview.2")

            ISSUE_URL=$(echo "$WI_DETAILS" | jq -r '.relations[]? | select(.rel=="ArtifactLink" and .attributes.name=="GitHub Issue") | .url')

            if [[ -n "$ISSUE_URL" && "$ISSUE_URL" != "null" ]]; then
              ISSUE_NUMBER=$(basename "$ISSUE_URL")
              echo "Work Item $id is linked to GitHub Issue number: $ISSUE_NUMBER"
              echo "$id,$ISSUE_NUMBER" >> process_list.txt
            else
              echo "Work Item $id has no linked GitHub Issue."
            fi
          done < closed_items.txt
        shell: bash

      - name: Post Comments on GitHub Issues
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const commentBody = "The corresponding work item has been closed. The fix should be available in the next release.";

            if (!fs.existsSync('process_list.txt')) {
              console.log("No issues to process. Exiting.");
              return;
            }

            const processList = fs.readFileSync('process_list.txt', 'utf8').trim().split('\n');
            
            for (const line of processList) {
              const [workItemId, issueNumber] = line.split(',');

              console.log(`Posting comment on GitHub Issue #${issueNumber} for Work Item ${workItemId}`);
              github.rest.issues.createComment({
                owner,
                repo,
                issue_number: 138,                       // Hard-Coded for Testing.
                body: commentBody
              });
            }
# Issue number is Hard Coded.