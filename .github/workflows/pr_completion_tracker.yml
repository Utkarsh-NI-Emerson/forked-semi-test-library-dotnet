name: Comment on Fixed Issues via GitHub Actions

on:
  workflow_dispatch:  # Allows manual triggering; you can also use a schedule
  schedule:
    - cron: "0 0 * * *"  # Adjust the schedule as needed

jobs:
  comment-on-issues:
    runs-on: ubuntu-latest
    env:
      AZDO_ORG: ni
      AZDO_PROJECT: DevCentral
      AREA_PATH: "DevCentral\\Business Units\\Semiconductor\\STS APT App SW\\Mixed Signal Libs and Tools"
      GITHUB_ORG: Utkarsh-NI-Emerson
      GITHUB_REPO: forked-semi-test-library-dotnet
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Closed Work Items from Azure DevOps
        id: fetch_workitems
        run: |
          echo "Fetching closed work items updated in the last day..."
          PAT="${{ secrets.AZDO_PAT }}"
          AREA_PATH_ESCAPED=$(echo "$AREA_PATH" | sed 's/\\/\\\\/g')
          PAYLOAD="{\"query\": \"SELECT [System.Id] FROM WorkItems WHERE [System.State] = 'Closed' AND [System.ChangedDate] >= @Today - 2 AND [System.WorkItemType] IN ('User Story', 'Bug', 'Customer Escalation') AND [System.AreaPath] = '$AREA_PATH_ESCAPED'\"}"
          RESPONSE=$(curl -s -u ":$PAT" \
            -X POST "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/wiql?api-version=7.1-preview.2" \
            -H "Content-Type: application/json" \
            --data-binary "$PAYLOAD")
          echo "$RESPONSE"
          if echo "$RESPONSE" | jq -e '.workItems' >/dev/null 2>&1; then
            ITEM_COUNT=$(echo "$RESPONSE" | jq '.workItems | length')
            if [ "$ITEM_COUNT" -eq 0 ]; then
              echo "No closed work items returned. Exiting."
              exit 0
            fi
            echo "$RESPONSE" | jq -r '.workItems[].id' > closed_items.txt
          else
            echo "Error: The response does not contain a valid 'workItems' array."
            exit 1
          fi

      - name: Process Work Items and Build Process List
        id: process_workitems
        run: |
          echo "Processing each work item..."
          if [ ! -s closed_items.txt ]; then
            echo "No closed work items found. Exiting."
            exit 0
          fi
          > process_list.txt
          while read id; do
            echo "Processing Work Item ID: $id"
            WI_DETAILS=$(curl -s -u ":${{ secrets.AZDO_PAT }}" \
              -X GET "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workitems/$id?\$expand=relations&api-version=7.1-preview.2")
            EXISTING_TAGS=$(echo "$WI_DETAILS" | jq -r '.fields["System.Tags"]')
            if echo "$EXISTING_TAGS" | grep -q "GitHubCommented"; then
                echo "Work Item $id already processed. Skipping..."
                continue
            fi
            ISSUE_URL=$(echo "$WI_DETAILS" | jq -r '.relations[]? | select(.rel=="ArtifactLink" and .attributes.name=="GitHub Issue") | .url')
            if [ -n "$ISSUE_URL" ] && [ "$ISSUE_URL" != "null" ]; then
                DECODED_URL=$(python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.argv[1]))" "$ISSUE_URL")
                if echo "$DECODED_URL" | grep -q "/GitHub/Issue/"; then
                    ISSUE_NUMBER=$(basename "$DECODED_URL")
                    echo "$id,$ISSUE_NUMBER" >> process_list.txt
                fi
            fi
          done < closed_items.txt

      - name: Post Comments on Retrieved GitHub Issues
        run: |
          echo "Posting comment on retrieved GitHub issues..."
          if [ ! -s process_list.txt ]; then
            echo "No work items to process. Exiting."
            exit 0
          fi
          while IFS=, read id issue_number; do
            echo "Posting comment on GitHub Issue ${issue_number} for Work Item $id"
            API_URL="https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/issues/${issue_number}/comments"
            RESPONSE=$(curl -s -X POST "$API_URL" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Content-Type: application/json" \
              -d '{"body": "The corresponding work item has been closed. The fix should be available in the next release."}')
            echo "Response from GitHub: $RESPONSE"
            # Update the work item in Azure DevOps to mark it as processed
            WI_DETAILS=$(curl -s -u ":${{ secrets.AZDO_PAT }}" -X GET "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workitems/$id?api-version=7.1-preview.3")
            EXISTING_TAGS=$(echo "$WI_DETAILS" | jq -r '.fields["System.Tags"]')
            if [ -z "$EXISTING_TAGS" ] || [ "$EXISTING_TAGS" = "null" ]; then
              NEW_TAGS="GitHubCommented"
            else
              NEW_TAGS="${EXISTING_TAGS};GitHubCommented"
            fi
            curl -s -u ":${{ secrets.AZDO_PAT }}" -X PATCH "https://dev.azure.com/$AZDO_ORG/$AZDO_PROJECT/_apis/wit/workitems/$id?api-version=7.1-preview.3" \
              -H "Content-Type: application/json-patch+json" \
              --data-binary "[{\"op\": \"add\", \"path\": \"/fields/System.Tags\", \"value\": \"${NEW_TAGS}\"}]"
          done < process_list.txt
