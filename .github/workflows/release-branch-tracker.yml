name: Comment on fixed issues about new release

on:
  create:
    branches:
      - 'release/*'

jobs:
  comment-on-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Process issues for new release
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const branchRef = context.ref;
            const version = branchRef.replace('refs/heads/release/', '');
            const releaseLink = `https://github.com/${owner}/${repo}/tree/release/${version}`;
            const targetUser = "github-actions[bot]";
            const triggerText = "The corresponding work item has been closed. The fix should be available in the next release.";
            const releaseCommentRegex = new RegExp(
              `^The fix for this issue is included in version [0-9.]+, which has now been released \\(\\[v[0-9.]+\\]\\(.+\\)\\)\\. This issue will auto close within the next 30 days\\.$`
            );

            const searchQuery = `repo:${owner}/${repo} is:issue "${triggerText}" in:comments`;
            console.log("Search query:", searchQuery);

            const issues = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q: searchQuery,
              per_page: 100,
            });
            console.log(`Found ${issues.length} issues with matching trigger comment.`);

            for (const issue of issues) {
              const comments = await github.paginate(github.rest.issues.listComments, {
                owner,
                repo,
                issue_number: issue.number,
                per_page: 100,
              });

              const hasTriggerComment = comments.some(comment =>
                comment.body.includes(triggerText) &&
                comment.user.login === targetUser
              );
              
              const hasReleaseComment = comments.some(comment =>
                releaseCommentRegex.test(comment.body)
              );

              if (hasTriggerComment && !hasReleaseComment) {
                const commentBody = `The fix for this issue is included in version ${version}, which has now been released ([v${version}](${releaseLink})). This issue will auto close within the next 30 days.`;
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: commentBody,
                });
                console.log(`Comment added to issue #${issue.number}`);
              } else {
                console.log(`Issue #${issue.number} either does not have the trigger comment or already has a release comment; skipping.`);
              }
            }






# name: Comment on fixed issues about new release

# on:
#   create:
#     branches:
#       - 'releases/*'

# jobs:
#   comment-on-issues:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Process issues for new release
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const { owner, repo } = context.repo;
#             const branchRef = context.ref;
#             const version = branchRef.replace('refs/heads/releases/', '');
#             const releaseLink = `https://github.com/${owner}/${repo}/tree/releases/${version}`;
#             const targetUser = "github-actions[bot]";

#             // Define the trigger comment text to look for.
#             const triggerText = "The corresponding work item has been closed. The fix should be available in the next release.";

#             // Define a regex to detect if a release comment is already present.
#             // The regex is designed to match the full release comment structure,
#             // allowing dynamic parts like the version number and the release link.
#             const releaseCommentRegex = new RegExp(
#               `^The fix for this issue is included in version [0-9.]+, which has now been released \\(\\[v[0-9.]+\\]\\(.+\\)\\)\\. This issue will auto close within the next 30 days\\.$`
#             );

#             // Construct search query to find issues with the trigger comment in them.
#             const searchQuery = `repo:${owner}/${repo} is:issue "${triggerText}" in:comments`;
#             console.log("Search query:", searchQuery);

#             // Retrieve all issues matching the search query.
#             const issues = await github.paginate(github.rest.search.issuesAndPullRequests, {
#               q: searchQuery,
#               per_page: 100,
#             });
#             console.log(`Found ${issues.length} issues with matching trigger comment.`);

#             // Process each issue
#             for (const issue of issues) {
#               // Retrieve all comments for the issue.
#               const comments = await github.paginate(github.rest.issues.listComments, {
#                 owner,
#                 repo,
#                 issue_number: issue.number,
#                 per_page: 100,
#               });
              
#               // Check if the trigger comment is present and posted by the target user.
#               const hasTriggerComment = comments.some(comment =>
#                 comment.body.includes(triggerText) &&
#                 comment.user.login === targetUser
#               );
              
#               // Use the regex to check if a release comment (matching the full expected structure) exists.
#               const hasReleaseComment = comments.some(comment =>
#                 releaseCommentRegex.test(comment.body)
#               );
              
#               // If the trigger comment exists and no matching release comment is present, add the release comment.
#               if (hasTriggerComment && !hasReleaseComment) {
#                 const commentBody = `The fix for this issue is included in version ${version}, which has now been released ([v${version}](${releaseLink})). This issue will auto close within the next 30 days.`;
#                 await github.rest.issues.createComment({
#                   owner,
#                   repo,
#                   issue_number: issue.number,
#                   body: commentBody,
#                 });
#                 console.log(`Comment added to issue #${issue.number}`);
#               } else {
#                 console.log(`Issue #${issue.number} either does not have the trigger comment or already has a release comment; skipping.`);
#               }
#             }
