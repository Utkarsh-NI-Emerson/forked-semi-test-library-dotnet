name: Comment on Fixed Issues (Filtered by Release Date and Comment User)

on:
  create:
    # Trigger when a branch matching release/* is created.
    branches:
      - 'release/*'

jobs:
  comment-on-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Process issues for new release
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const branchRef = context.ref;
            // Changed branch extraction for release/* instead of releases/*
            const version = branchRef.replace('refs/heads/release/', '');
            // Changed release link to point to the release/ branch
            const releaseLink = `https://github.com/${owner}/${repo}/tree/release/${version}`;
            const targetUser = "github-actions[bot]"; // Have to replace with the actual username (Github).

            //===========================================================================================

            let latestReleaseBranch = null;
            let previousReleaseBranch = null;
            let previousReleaseDate = new Date(0); // default fallback

            try {
              // List all branches in the repository.
              const branchesResponse = await github.rest.repos.listBranches({
                owner,
                repo,
                per_page: 100,
              });

              // Filter branches that start with "release/"
              // Change to releases/ in actual code.
              const releaseBranches = branchesResponse.data.filter(branch =>
                branch.name.startsWith("release/")
              );

              if (releaseBranches.length === 0) {
                console.log("No release branches found.");
              } else {
                // For each release branch, fetch its commit details to get the commit date.
                const branchDetails = await Promise.all(releaseBranches.map(async branch => {
                  const commitResponse = await github.rest.repos.getCommit({
                    owner,
                    repo,
                    ref: branch.commit.sha,
                  });
                  return {
                    branchName: branch.name,
                    commitDate: new Date(commitResponse.data.commit.author.date)
                  };
                }));

                // Sort the branch details by commit date descending (most recent first)
                branchDetails.sort((a, b) => b.commitDate - a.commitDate);

                // The first branch is the latest release branch.
                latestReleaseBranch = branchDetails[0];

                // If there's at least two release branches, use the second as the previous.
                if (branchDetails.length >= 2) {
                  previousReleaseBranch = branchDetails[1];
                  previousReleaseDate = previousReleaseBranch.commitDate;
                }

                console.log("Latest release branch:", latestReleaseBranch.branchName, "with commit date:", latestReleaseBranch.commitDate);
                if (previousReleaseBranch) {
                  console.log("Previous release branch:", previousReleaseBranch.branchName, "with commit date:", previousReleaseBranch.commitDate);
                } else {
                  console.log("Only one release branch found; no previous release branch available.");
                }
              }
            } catch (error) {
              console.log("Error fetching release branch details; defaulting previous release date to epoch start. Error details:", error);
            }

            //===========================================================================================

            const searchQuery = `repo:${owner}/${repo} is:issue "The corresponding work item has been closed. The fix should be available in the next release." in:comments`;
            console.log("Search query:", searchQuery);

            const issues = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q: searchQuery,
              per_page: 100,
            });
            console.log(`Found ${issues.length} issues with matching comment.`);

            for (const issue of issues) {
              const comments = await github.paginate(github.rest.issues.listComments, {
                owner,
                repo,
                issue_number: issue.number,
                per_page: 100,
              });
                
              let eligible = false;
              for (const comment of comments) {
                console.log(`Evaluating comment ${comment.id} on issue #${issue.number}`);
                const containsText = comment.body.includes("The corresponding work item has been closed. The fix should be available in the next release.");
                const isFromTargetUser = comment.user.login === targetUser;

                const createdAfter = new Date(comment.created_at) > previousReleaseDate;
                console.log(`Comment ${comment.id}: Contains required text? ${containsText}, Is from target user? ${isFromTargetUser}, Created after last release? ${createdAfter}`);
                  
                if (containsText && isFromTargetUser && createdAfter) {
                  eligible = true;
                  break;
                }
              }
                
              if (eligible) {
                const commentBody = `The fix for this issue is included in version ${version}, which has now been released ([v${version}](${releaseLink})). This issue will auto close within the next 30 days.`;
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: 138,
                  body: commentBody,
                });
                console.log(`Comment added to issue #${issue.number}`);
              } else {
                console.log(`Issue #${issue.number} is not eligible; skipping.`);
              }
            }






# name: Comment on Fixed Issues

# on:
#   create:
#     # Trigger when a branch matching releases/* is created. See in forked repo its release/* and not releases/*
#     branches:
#       - 'releases/*'

# jobs:
#   comment-on-issues:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Process issues for new release
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const { owner, repo } = context.repo;
#             const branchRef = context.ref;
#             const version = branchRef.replace('refs/heads/releases/', '');
#             const releaseLink = `https://github.com/${owner}/${repo}/tree/releases/${version}`;
#             const targetUser = "github-actions";

              # //===========================================================================================

              # let latestReleaseBranch = null;
              # let previousReleaseBranch = null;
              # let previousReleaseDate = new Date(0); // default fallback

              # try {
              #   const branchesResponse = await github.rest.repos.listBranches({
              #     owner,
              #     repo,
              #     per_page: 100,
              #   });

              #   const releaseBranches = branchesResponse.data.filter(branch =>
              #     branch.name.startsWith("releases/")
              #   );

              #   if (releaseBranches.length === 0) {
              #     console.log("No release branches found.");
              #   } else {
              #     const branchDetails = await Promise.all(releaseBranches.map(async branch => {
              #       const commitResponse = await github.rest.repos.getCommit({
              #         owner,
              #         repo,
              #         ref: branch.commit.sha,
              #       });
              #       return {
              #         branchName: branch.name,
              #         commitDate: new Date(commitResponse.data.commit.author.date)
              #       };
              #     }));

              #     branchDetails.sort((a, b) => b.commitDate - a.commitDate);
              #     latestReleaseBranch = branchDetails[0];

              #     if (branchDetails.length >= 2) {
              #       previousReleaseBranch = branchDetails[1];
              #       previousReleaseDate = previousReleaseBranch.commitDate;
              #     }

              #     console.log("Latest release branch:", latestReleaseBranch.branchName, "with commit date:", latestReleaseBranch.commitDate);
              #     if (previousReleaseBranch) {
              #       console.log("Previous release branch:", previousReleaseBranch.branchName, "with commit date:", previousReleaseBranch.commitDate);
              #     } else {
              #       console.log("Only one release branch found; no previous release branch available.");
              #     }
              #   }
              # } catch (error) {
              #   console.log("Error fetching release branch details; defaulting previous release date to epoch start. Error details:", error);
              # }

              # //===========================================================================================
            
#             const searchQuery = `repo:${owner}/${repo} is:issue "The corresponding work item has been closed. The fix should be available in the next release." in:comments`;
#             console.log("Search query:", searchQuery);

#             const issues = await github.paginate(github.rest.search.issuesAndPullRequests, {
#               q: `repo:${owner}/${repo} is:issue "The corresponding work item has been closed. The fix should be available in the next release." in:comments`,
#               per_page: 100,
#             });
#             console.log(`Found ${issues.length} issues with matching comment.`);

#             for (const issue of issues) {
#               const comments = await github.paginate(github.rest.issues.listComments, {
#               owner,
#               repo,
#               issue_number: issue.number,
#               per_page: 100,
#               });
                
#               let eligible = false;
#               for (const comment of comments) {
#                 console.log(`Evaluating comment ${comment.id} on issue #${issue.number}`);
#                 const containsText = comment.body.includes("The corresponding work item has been closed. The fix should be available in the next release.");
#                 const isFromTargetUser = comment.user.login === targetUser;

#                 const createdAfter = new Date(comment.created_at) > previousReleaseDate;
#                 console.log(`Comment ${comment.id}: Contains required text? ${containsText}, Is from target user? ${isFromTargetUser}, Created after last release? ${createdAfter}`);
                  
#                 if (containsText && isFromTargetUser && createdAfter) {
#                   eligible = true;
#                   break;
#                 }
#               }
                
#               if (eligible) {
#                 const commentBody = `The fix for this issue is included in version ${version}, which has now been released ([click here](${releaseLink})). This issue will auto close within the next 30 days.`;
#                 await github.rest.issues.createComment({
#                   owner,
#                   repo,
#                   issue_number: issue.number,
#                   body: commentBody,
#                 });
#                 console.log(`Comment added to issue #${issue.number}`);
#               } else {
#                 console.log(`Issue #${issue.number} is not eligible; skipping.`);
#               }
#             }